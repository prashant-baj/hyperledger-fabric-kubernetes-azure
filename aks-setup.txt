Resource group - rsg_hlfdemos

Create ubuntu vm
sudo apt-get update
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
sudo apt install docker.io

az login

-- az acr create --resource-group rsg_hlfdemos --name hlfDemosACR --sku Basic
az acr login -n hlfDemosACR
az configure --defaults acr=hlfDemosACR

az aks install-cli
az aks get-credentials --resource-group rsg_hlfdemos --name hlfdemosAKSCluster
kubectl get nodes
kubectl get pods




az acr create --resource-group rsg_hlfdemos --name hlfDemosACR --sku Basic
az acr login -n hlfDemosACR --expose-token

docker pull k8s.gcr.io/ingress-nginx/controller:v1.0.1
docker pull k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0
docker pull busybox:latest
docker pull hyperledger/fabric-tools:latest
docker pull hyperledger/fabric-peer:latest
docker pull hyperledger/fabric-orderer:latest
docker pull hyperledger/fabric-ccenv:latest
docker pull hyperledger/fabric-baseos:latest
docker pull couchdb:3.1.1
docker pull hyperledger/fabric-ca:latest
docker pull ghcr.io/hyperledgendary/fabric-rest-sample
docker pull ghcr.io/hyperledgendary/fabric-ccaas-asset-transfer-basic:latest

docker tag k8s.gcr.io/ingress-nginx/controller:v1.0.1 hlfdemosacr.azurecr.io/ingress-nginx/controller:v1.0.1
docker push hlfdemosacr.azurecr.io/ingress-nginx/controller:v1.0.1

docker tag k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0 hlfdemosacr.azurecr.io/ingress-nginx/kube-webhook-certgen:v1.0
docker push hlfdemosacr.azurecr.io/ingress-nginx/kube-webhook-certgen:v1.0

docker tag busybox:latest hlfdemosacr.azurecr.io/busybox:latest
docker push hlfdemosacr.azurecr.io/busybox:latest

docker tag hyperledger/fabric-tools:latest hlfdemosacr.azurecr.io/fabric-tools:latest
docker push hlfdemosacr.azurecr.io/fabric-tools:latest

docker tag hyperledger/fabric-peer:latest hlfdemosacr.azurecr.io/fabric-peer:latest
docker push hlfdemosacr.azurecr.io/fabric-peer:latest

docker tag hyperledger/fabric-orderer:latest hlfdemosacr.azurecr.io/fabric-orderer:latest
docker push hlfdemosacr.azurecr.io/fabric-orderer:latest

docker tag hyperledger/fabric-ccenv:latest hlfdemosacr.azurecr.io/fabric-ccenv:latest
docker push hlfdemosacr.azurecr.io/fabric-ccenv:latest

docker tag hyperledger/fabric-baseos:latest hlfdemosacr.azurecr.io/fabric-baseos:latest
docker push hlfdemosacr.azurecr.io/fabric-baseos:latest

docker tag couchdb:3.1.1 hlfdemosacr.azurecr.io/couchdb:3.1.1
docker push hlfdemosacr.azurecr.io/couchdb:3.1.1

docker tag hyperledger/fabric-ca:latest hlfdemosacr.azurecr.io/fabric-ca:latest
docker push hlfdemosacr.azurecr.io/fabric-ca:latest

docker tag ghcr.io/hyperledgendary/fabric-rest-sample hlfdemosacr.azurecr.io/hyperledgendary/fabric-rest-sample
docker push hlfdemosacr.azurecr.io/hyperledgendary/fabric-rest-sample

docker tag ghcr.io/hyperledgendary/fabric-ccaas-asset-transfer-basic:latest hlfdemosacr.azurecr.io/hyperledgendary/fabric-ccaas-asset-transfer-basic:latest
docker push hlfdemosacr.azurecr.io/hyperledgendary/fabric-ccaas-asset-transfer-basic:latest

=================================================================
sudo apt-get install jq
upload demo files to a directory
go to directory
bash ./network up
bash ./network channel create
bash ./network chaincode deploy
bash ./network chaincode query 







==================================================================
# Kube config
  init_namespace
  init_storage_volumes
  load_org_config

  # Network TLS CAs
  launch_TLS_CAs
  enroll_bootstrap_TLS_CA_users

  # Network ECert CAs
  register_enroll_ECert_CA_bootstrap_users
  launch_ECert_CAs
  enroll_bootstrap_ECert_CA_users

  # Test Network
  create_local_MSP
  launch_orderers
  launch_peers


=================================================================
Run ymls - 
 Volumes
 
  kubectl apply -f kube/pv-fabric-org0.yaml 
  kubectl apply -f kube/pv-fabric-org1.yaml 
  kubectl apply -f kube/pv-fabric-org2.yaml 

  kubectl apply -f kube/pvc-fabric-org0.yaml 
  kubectl apply -f kube/pvc-fabric-org1.yaml 
  kubectl apply -f kube/pvc-fabric-org2.yaml 
 
 Configmap
 
  kubectl  delete configmap org0-config || true
  kubectl  delete configmap org1-config || true
  kubectl  delete configmap org2-config || true

  kubectl create configmap org0-config --from-file=config/org0
  kubectl create configmap org1-config --from-file=config/org1
  kubectl create configmap org2-config --from-file=config/org2
  
 
 CA
 
 kubectl apply -f kube/org0/org0-tls-ca.yaml
 kubectl apply -f kube/org0/org1-tls-ca.yaml
 kubectl apply -f kube/org0/org2-tls-ca.yaml
 
 
 ## bootstrap TLS CA users for org0
 exec kubectl exec deploy/org0-tls-ca -i -- /bin/sh
 
 mkdir -p $FABRIC_CA_CLIENT_HOME/tls-root-cert
 cp $FABRIC_CA_SERVER_HOME/ca-cert.pem $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem
 fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org0-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org0-tls-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

 ## bootstrap TLS CA users for org1
 exec kubectl exec deploy/org1-tls-ca -i -- /bin/sh
 
 mkdir -p $FABRIC_CA_CLIENT_HOME/tls-root-cert
 cp $FABRIC_CA_SERVER_HOME/ca-cert.pem $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem
 fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org1-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org1-tls-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp
    
    
  ## bootstrap TLS CA users for org2
 exec kubectl exec deploy/org2-tls-ca -i -- /bin/sh
 
 mkdir -p $FABRIC_CA_CLIENT_HOME/tls-root-cert
 cp $FABRIC_CA_SERVER_HOME/ca-cert.pem $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem
 fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org2-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org2-tls-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp  
    

  ## Network ECert CAs
  ##register_enroll_ECert_CA_bootstrap_users
  
  kubectl exec deploy/org0-tls-ca -i -- /bin/sh
fabric-ca-client register \
    --id.name rcaadmin \
    --id.secret rcaadminpw \
    --url https://org0-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org0-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org0-ecert-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp

  cp $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/*_sk $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/key.pem



kubectl exec deploy/org1-tls-ca -i -- /bin/sh

fabric-ca-client register \
    --id.name rcaadmin \
    --id.secret rcaadminpw \
    --url https://org1-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org1-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org1-ecert-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp

  cp $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/*_sk $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/key.pem


kubectl exec deploy/org2-tls-ca -i -- /bin/sh
fabric-ca-client register \
    --id.name rcaadmin \
    --id.secret rcaadminpw \
    --url https://org2-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll \
    --url https://tlsadmin:tlsadminpw@org2-tls-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --csr.hosts org2-ecert-ca \
    --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp

  cp $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/*_sk $FABRIC_CA_CLIENT_HOME/tls-ca/rcaadmin/msp/keystore/key.pem

  
  
  ##launch_ECert_CAs
 
  kubectl apply -f kube/org0/org0-ecert-ca.yaml
  kubectl apply -f kube/org1/org1-ecert-ca.yaml
  kubectl apply -f kube/org2/org2-ecert-ca.yaml
  
  
  ##enroll_bootstrap_ECert_CA_users
  
  exec kubectl exec deploy/org0-ecert-ca -i -- /bin/sh
fabric-ca-client enroll \
    --url https://rcaadmin:rcaadminpw@org0-ecert-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/org0-ecert-ca/rcaadmin/msp

exec kubectl exec deploy/org1-ecert-ca -i -- /bin/sh
fabric-ca-client enroll \
    --url https://rcaadmin:rcaadminpw@org1-ecert-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/org1-ecert-ca/rcaadmin/msp


exec kubectl exec deploy/org2-ecert-ca -i -- /bin/sh
fabric-ca-client enroll \
    --url https://rcaadmin:rcaadminpw@org2-ecert-ca \
    --tls.certfiles $FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem \
    --mspdir $FABRIC_CA_CLIENT_HOME/org2-ecert-ca/rcaadmin/msp



# Test Network
  ##create_local_MSP
  
  ### create_org0_local_MSP
  exec kubectl exec deploy/org0-ecert-ca -i -- /bin/sh
  
  export FABRIC_CA_CLIENT_HOME=/var/hyperledger/fabric-ca-client
  export FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem

  # Each identity in the network needs a registration and enrollment.
  fabric-ca-client register --id.name org0-orderer1 --id.secret ordererpw --id.type orderer --url https://org0-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org0-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org0-orderer2 --id.secret ordererpw --id.type orderer --url https://org0-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org0-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org0-orderer3 --id.secret ordererpw --id.type orderer --url https://org0-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org0-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org0-admin --id.secret org0adminpw  --id.type admin   --url https://org0-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org0-ecert-ca/rcaadmin/msp --id.attrs "hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"

  fabric-ca-client enroll --url https://org0-orderer1:ordererpw@org0-ecert-ca --csr.hosts org0-orderer1 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/msp
  fabric-ca-client enroll --url https://org0-orderer2:ordererpw@org0-ecert-ca --csr.hosts org0-orderer2 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer2.org0.example.com/msp
  fabric-ca-client enroll --url https://org0-orderer3:ordererpw@org0-ecert-ca --csr.hosts org0-orderer3 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer3.org0.example.com/msp
  fabric-ca-client enroll --url https://org0-admin:org0adminpw@org0-ecert-ca --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/users/Admin@org0.example.com/msp

  # Each node in the network needs a TLS registration and enrollment.
  fabric-ca-client register --id.name org0-orderer1 --id.secret ordererpw --id.type orderer --url https://org0-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp
  fabric-ca-client register --id.name org0-orderer2 --id.secret ordererpw --id.type orderer --url https://org0-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp
  fabric-ca-client register --id.name org0-orderer3 --id.secret ordererpw --id.type orderer --url https://org0-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll --url https://org0-orderer1:ordererpw@org0-tls-ca --csr.hosts org0-orderer1 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/tls
  fabric-ca-client enroll --url https://org0-orderer2:ordererpw@org0-tls-ca --csr.hosts org0-orderer2 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer2.org0.example.com/tls
  fabric-ca-client enroll --url https://org0-orderer3:ordererpw@org0-tls-ca --csr.hosts org0-orderer3 --mspdir /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer3.org0.example.com/tls

  # Copy the TLS signing keys to a fixed path for convenience when starting the orderers.
  cp /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/tls/keystore/server.key
  cp /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer2.org0.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer2.org0.example.com/tls/keystore/server.key
  cp /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer3.org0.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer3.org0.example.com/tls/keystore/server.key

  # Create an MSP config.yaml (why is this not generated by the enrollment by fabric-ca-client?)
  echo "NodeOUs:
    Enable: true
    ClientOUIdentifier:
      Certificate: cacerts/org0-ecert-ca.pem
      OrganizationalUnitIdentifier: client
    PeerOUIdentifier:
      Certificate: cacerts/org0-ecert-ca.pem
      OrganizationalUnitIdentifier: peer
    AdminOUIdentifier:
      Certificate: cacerts/org0-ecert-ca.pem
      OrganizationalUnitIdentifier: admin
    OrdererOUIdentifier:
      Certificate: cacerts/org0-ecert-ca.pem
      OrganizationalUnitIdentifier: orderer" > /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/msp/config.yaml

  cp /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer2.org0.example.com/msp/config.yaml
  cp /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer1.org0.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/ordererOrganizations/org0.example.com/orderers/org0-orderer3.org0.example.com/msp/config.yaml
  
  ### function create_org1_local_MSP

  exec kubectl exec deploy/org1-ecert-ca -i -- /bin/sh

  export FABRIC_CA_CLIENT_HOME=/var/hyperledger/fabric-ca-client
  export FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem

  # Each identity in the network needs a registration and enrollment.
  fabric-ca-client register --id.name org1-peer1 --id.secret peerpw --id.type peer --url https://org1-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org1-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org1-peer2 --id.secret peerpw --id.type peer --url https://org1-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org1-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org1-admin --id.secret org1adminpw  --id.type admin   --url https://org1-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org1-ecert-ca/rcaadmin/msp --id.attrs "hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"

  fabric-ca-client enroll --url https://org1-peer1:peerpw@org1-ecert-ca --csr.hosts org1-peer1,org1-peer-gateway-svc --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/msp
  fabric-ca-client enroll --url https://org1-peer2:peerpw@org1-ecert-ca --csr.hosts org1-peer2,org1-peer-gateway-svc --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer2.org1.example.com/msp
  fabric-ca-client enroll --url https://org1-admin:org1adminpw@org1-ecert-ca  --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp

  # Each node in the network needs a TLS registration and enrollment.
  fabric-ca-client register --id.name org1-peer1 --id.secret peerpw --id.type peer --url https://org1-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp
  fabric-ca-client register --id.name org1-peer2 --id.secret peerpw --id.type peer --url https://org1-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll --url https://org1-peer1:peerpw@org1-tls-ca --csr.hosts org1-peer1 --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/tls
  fabric-ca-client enroll --url https://org1-peer2:peerpw@org1-tls-ca --csr.hosts org1-peer2 --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer2.org1.example.com/tls

  # Copy the TLS signing keys to a fixed path for convenience when launching the peers
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/tls/keystore/server.key
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer2.org1.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer2.org1.example.com/tls/keystore/server.key

  cp /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/server.key

  # Create local MSP config.yaml
  echo "NodeOUs:
    Enable: true
    ClientOUIdentifier:
      Certificate: cacerts/org1-ecert-ca.pem
      OrganizationalUnitIdentifier: client
    PeerOUIdentifier:
      Certificate: cacerts/org1-ecert-ca.pem
      OrganizationalUnitIdentifier: peer
    AdminOUIdentifier:
      Certificate: cacerts/org1-ecert-ca.pem
      OrganizationalUnitIdentifier: admin
    OrdererOUIdentifier:
      Certificate: cacerts/org1-ecert-ca.pem
      OrganizationalUnitIdentifier: orderer" > /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/msp/config.yaml


  cp /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer2.org1.example.com/msp/config.yaml
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/peers/org1-peer1.org1.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml
  
  
  #### create_org2_local_MSP
  exec kubectl exec deploy/org2-ecert-ca -i -- /bin/sh
  
  export FABRIC_CA_CLIENT_HOME=/var/hyperledger/fabric-ca-client
  export FABRIC_CA_CLIENT_TLS_CERTFILES=$FABRIC_CA_CLIENT_HOME/tls-root-cert/tls-ca-cert.pem

  # Each identity in the network needs a registration and enrollment.
  fabric-ca-client register --id.name org2-peer1 --id.secret peerpw --id.type peer --url https://org2-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org2-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org2-peer2 --id.secret peerpw --id.type peer --url https://org2-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org2-ecert-ca/rcaadmin/msp
  fabric-ca-client register --id.name org2-admin --id.secret org2adminpw  --id.type admin   --url https://org2-ecert-ca --mspdir $FABRIC_CA_CLIENT_HOME/org2-ecert-ca/rcaadmin/msp --id.attrs "hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"

  fabric-ca-client enroll --url https://org2-peer1:peerpw@org2-ecert-ca --csr.hosts org2-peer1,org2-peer-gateway-svc --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/msp
  fabric-ca-client enroll --url https://org2-peer2:peerpw@org2-ecert-ca --csr.hosts org2-peer2,org2-peer-gateway-svc --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer2.org2.example.com/msp
  fabric-ca-client enroll --url https://org2-admin:org2adminpw@org2-ecert-ca  --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp

  # Each node in the network needs a TLS registration and enrollment.
  fabric-ca-client register --id.name org2-peer1 --id.secret peerpw --id.type peer --url https://org2-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp
  fabric-ca-client register --id.name org2-peer2 --id.secret peerpw --id.type peer --url https://org2-tls-ca --mspdir $FABRIC_CA_CLIENT_HOME/tls-ca/tlsadmin/msp

  fabric-ca-client enroll --url https://org2-peer1:peerpw@org2-tls-ca --csr.hosts org2-peer1 --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/tls
  fabric-ca-client enroll --url https://org2-peer2:peerpw@org2-tls-ca --csr.hosts org2-peer2 --mspdir /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer2.org2.example.com/tls

  # Copy the TLS signing keys to a fixed path for convenience when launching the peers
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/tls/keystore/server.key
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer2.org2.example.com/tls/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer2.org2.example.com/tls/keystore/server.key

  cp /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/*_sk /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/server.key

  # Create local MSP config.yaml
  echo "NodeOUs:
    Enable: true
    ClientOUIdentifier:
      Certificate: cacerts/org2-ecert-ca.pem
      OrganizationalUnitIdentifier: client
    PeerOUIdentifier:
      Certificate: cacerts/org2-ecert-ca.pem
      OrganizationalUnitIdentifier: peer
    AdminOUIdentifier:
      Certificate: cacerts/org2-ecert-ca.pem
      OrganizationalUnitIdentifier: admin
    OrdererOUIdentifier:
      Certificate: cacerts/org2-ecert-ca.pem
      OrganizationalUnitIdentifier: orderer" > /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/msp/config.yaml

  cp /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer2.org2.example.com/msp/config.yaml
  cp /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/peers/org2-peer1.org2.example.com/msp/config.yaml /var/hyperledger/fabric/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/config.yaml
  

  
  ##launch_orderers
  
  
  kubectl apply -f kube/org0/org0-orderer1.yaml
  kubectl apply -f kube/org0/org0-orderer2.yaml
  kubectl apply -f kube/org0/org0-orderer3.yaml
  
  ##launch_peers
  
  kubectl apply -f kube/org1/org1-peer1.yaml
  kubectl apply -f kube/org1/org1-peer2.yaml
  kubectl apply -f kube/org2/org2-peer1.yaml
  kubectl apply -f kube/org2/org2-peer2.yaml
  
  
  ======================================================
  
You can perform manual login using the provided access token below, for example: 'docker login loginServer -u 00000000-0000-0000-0000-000000000000 -p accessToken'
{
  "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlVWVzc6T1JDQjozVkNIOjY2UEI6R1kyWjpOU01KOldIVVE6Qjc3WDpLWTdaOlRaU1A6UkZZWDpIVTdRIn0.eyJqdGkiOiJiZDBiN2I1ZS0yYzVhLTQ3ODctYWEzYi04MjExNDI1ZWJkYjYiLCJzdWIiOiJsaXZlLmNvbSNrcmlzaGIzNTAwQGdtYWlsLmNvbSIsIm5iZiI6MTYzOTM2OTI3OCwiZXhwIjoxNjM5MzgwOTc4LCJpYXQiOjE2MzkzNjkyNzgsImlzcyI6IkF6dXJlIENvbnRhaW5lciBSZWdpc3RyeSIsImF1ZCI6ImhsZmRlbW9zYWNyLmF6dXJlY3IuaW8iLCJ2ZXJzaW9uIjoiMS4wIiwicmlkIjoiNzM5N2MxYTcxMThhNDZkODhmMGFkNDAwYjM1ZGU1NWMiLCJncmFudF90eXBlIjoicmVmcmVzaF90b2tlbiIsImFwcGlkIjoiMDRiMDc3OTUtOGRkYi00NjFhLWJiZWUtMDJmOWUxYmY3YjQ2IiwidGVuYW50IjoiNWY5ZDgxODMtYWM0OS00MTdiLTk1YzMtZjEyZDBiMjE4NTk1IiwicGVybWlzc2lvbnMiOnsiQWN0aW9ucyI6WyJyZWFkIiwid3JpdGUiLCJkZWxldGUiXSwiTm90QWN0aW9ucyI6bnVsbH0sInJvbGVzIjpbXX0.YQjLFneiEVIQB6kxiIyU-SdfkWxa87W1-PTtmF_O1OEzxXouHSbGXpOOvDwGiRLIMJleOwg8tq2iIxL-dtuTZBYEgMYoa9GpG8L55ECzTF51fM3A4IR4CdApnvZqYY7gWZniRAqHELQpbSDMJ0iqeDHSCqrqUrrL-STYJjaVEuFzs4HN5gTi-TyelM98p5z9EdZyY1EUo1UUNo6ZSTGjC7teBjsOGJNc320ntfOi03Ji4xWRbj5cI8WhmnzW5gZTG7u7qFp2LerfFUyHUIkAhBvjif7GD_Ubpt69HyQJ53dKaXS7Fmyi4L00hHcECcVDiEXiiyIcMOa2qqGCzw1qpA",
  "loginServer": "hlfdemosacr.azurecr.io"
}

docker login hlfdemosacr.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p accessToken eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlVWVzc6T1JDQjozVkNIOjY2UEI6R1kyWjpOU01KOldIVVE6Qjc3WDpLWTdaOlRaU1A6UkZZWDpIVTdRIn0.eyJqdGkiOiJiZDBiN2I1ZS0yYzVhLTQ3ODctYWEzYi04MjExNDI1ZWJkYjYiLCJzdWIiOiJsaXZlLmNvbSNrcmlzaGIzNTAwQGdtYWlsLmNvbSIsIm5iZiI6MTYzOTM2OTI3OCwiZXhwIjoxNjM5MzgwOTc4LCJpYXQiOjE2MzkzNjkyNzgsImlzcyI6IkF6dXJlIENvbnRhaW5lciBSZWdpc3RyeSIsImF1ZCI6ImhsZmRlbW9zYWNyLmF6dXJlY3IuaW8iLCJ2ZXJzaW9uIjoiMS4wIiwicmlkIjoiNzM5N2MxYTcxMThhNDZkODhmMGFkNDAwYjM1ZGU1NWMiLCJncmFudF90eXBlIjoicmVmcmVzaF90b2tlbiIsImFwcGlkIjoiMDRiMDc3OTUtOGRkYi00NjFhLWJiZWUtMDJmOWUxYmY3YjQ2IiwidGVuYW50IjoiNWY5ZDgxODMtYWM0OS00MTdiLTk1YzMtZjEyZDBiMjE4NTk1IiwicGVybWlzc2lvbnMiOnsiQWN0aW9ucyI6WyJyZWFkIiwid3JpdGUiLCJkZWxldGUiXSwiTm90QWN0aW9ucyI6bnVsbH0sInJvbGVzIjpbXX0.YQjLFneiEVIQB6kxiIyU-SdfkWxa87W1-PTtmF_O1OEzxXouHSbGXpOOvDwGiRLIMJleOwg8tq2iIxL-dtuTZBYEgMYoa9GpG8L55ECzTF51fM3A4IR4CdApnvZqYY7gWZniRAqHELQpbSDMJ0iqeDHSCqrqUrrL-STYJjaVEuFzs4HN5gTi-TyelM98p5z9EdZyY1EUo1UUNo6ZSTGjC7teBjsOGJNc320ntfOi03Ji4xWRbj5cI8WhmnzW5gZTG7u7qFp2LerfFUyHUIkAhBvjif7GD_Ubpt69HyQJ53dKaXS7Fmyi4L00hHcECcVDiEXiiyIcMOa2qqGCzw1qpA
==============
Chaincode as a service resources
https://medium.com/@ginspcyriac744/node-js-chaincode-as-an-external-service-f1c9ea6941ce
https://github.com/Gins47/Fabric
    
  
 
 
 
 
 
 








